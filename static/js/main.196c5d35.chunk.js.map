{"version":3,"sources":["components/Timer.jsx","components/CountdownUI.jsx","components/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Timer","useState","isActive","setIsActive","now","setNow","ms","setMs","useEffect","interval","setInterval","Date","clearInterval","mathDel","num","Math","trunc","title","bordered","style","width","className","type","onClick","marginRight","CountdownUI","props","minutes","handleSecondsChange","handleSliderChange","handleMinutsChange","seconds","disabled","min","max","value","onChange","step","Countdown","setMinutes","setSeconds","startTime","setStartTime","progress","setProgress","stylesCard","display","alignItems","justifyContent","toggle","reset","sec","Audio","play","time","percent","floor","TabPane","Tabs","stylesLayout","padding","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.196c5d35.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Card } from 'antd';\n\nconst Timer = () => {\n  const [isActive, setIsActive] = useState(false);\n  const [now, setNow] = useState(null);\n  const [ms, setMs] = useState(0);\n\n  function toggle() {\n    setIsActive(!isActive);\n    if (now === null) {\n      setNow(Date.now());\n    }\n  }\n\n  function reset() {\n    setIsActive(false);\n    setMs(0);\n    setNow(null);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setMs(Date.now() - now);\n      }, 1);\n    } else if (!isActive && ms !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, now, ms]);\n\n  const mathDel = (num) => Math.trunc(num);\n\n  return (\n    <div>\n      <Card title=\"Timer\" bordered={false} style={{ width: 300 }}>\n        <div className=\"time\">\n          {mathDel(ms / 1000 / 60) < 60 ? mathDel(ms / 1000 / 60) : mathDel(ms / 1000 / 60) % 60}\n          m: {mathDel(ms / 1000) < 10 ? mathDel(ms / 1000) : mathDel(ms / 1000) % 60}\n          s: {ms < 1000 ? ms : ms % 1000}\n          ms\n          <hr />\n          <div>\n            <Button type=\"primary\" onClick={toggle} style={{ marginRight: 5 }}>\n              {isActive ? 'Pause' : 'Start'}\n            </Button>\n            <Button type=\"primary\" onClick={reset}>\n              Reset\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport { Slider, InputNumber } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst CountdownUI = (props) => {\n  const {\n    isActive,\n    minutes,\n    handleSecondsChange,\n    handleSliderChange,\n    handleMinutsChange,\n    seconds,\n  } = props;\n  return (\n    <div>\n      <div>\n        <span>minutes: </span>\n        <InputNumber\n          disabled={isActive}\n          min={0}\n          max={720} // у минут ограничиваться 720 минутами\n          style={{}}\n          value={minutes}\n          onChange={handleMinutsChange}\n        />\n      </div>\n      <div>\n        <span>seconds: </span>\n        <InputNumber\n          disabled={isActive}\n          min={0}\n          max={60} // у секунд 0 до 60 сек\n          style={{}}\n          value={seconds}\n          onChange={handleSecondsChange}\n        />\n      </div>\n      <div>\n        <Slider\n          disabled={isActive}\n          min={0}\n          max={60 * 60} // у слайдера 0 до 60 минут\n          step={15} // шаг 15с\n          onChange={handleSliderChange}\n          value={minutes * 60 + seconds}\n        />\n      </div>\n    </div>\n  );\n};\n\nCountdownUI.propTypes = {\n  isActive: PropTypes.bool.isRequired,\n  minutes: PropTypes.number.isRequired,\n  handleSecondsChange: PropTypes.func.isRequired,\n  handleSliderChange: PropTypes.func.isRequired,\n  handleMinutsChange: PropTypes.func.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\n\nexport default CountdownUI;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Progress, Button } from 'antd';\nimport CountdownUI from './CountdownUI';\n\nconst Countdown = () => {\n  const [minutes, setMinutes] = useState(1);\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [startTime, setStartTime] = useState(0);\n  const [progress, setProgress] = useState(100);\n  const stylesCard = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n\n  const toggle = () => {\n    if (!(minutes === 0 && seconds === 0)) setIsActive(!isActive);\n    setStartTime(minutes * 60 + seconds);\n  };\n\n  const reset = () => {\n    setSeconds(0);\n    setMinutes(0);\n    setProgress(100);\n    setIsActive(false);\n  };\n\n  useEffect(() => {\n    const handleProgressChange = () => {\n      setProgress((100 * (minutes * 60 + seconds)) / startTime);\n    };\n    let interval = null;\n    if (isActive) {\n      handleProgressChange();\n      interval = setInterval(() => {\n        if (seconds === 0) {\n          setMinutes((min) => min - 1);\n          setSeconds(60);\n        }\n        setSeconds((sec) => sec - 1);\n        if (seconds === 1) {\n          setMinutes((min) => min - 1);\n          setSeconds(59);\n        }\n        if (minutes === 0 && seconds === 1) {\n          new Audio('./music/audio.wav').play();\n          reset();\n        }\n      }, 1000);\n    } else if (!isActive) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds, minutes, progress, startTime]);\n\n  const handleSecondsChange = (sec) => {\n    setSeconds(sec);\n  };\n  const handleMinutsChange = (min) => {\n    setMinutes(min);\n  };\n  const handleSliderChange = (time) => {\n    setMinutes(Math.trunc(time / 60));\n    setSeconds(time % 60);\n  };\n\n  const renderCard = () => (\n    <Card\n      title=\"Countdown\"\n      bordered={false}\n      style={{\n        width: 300,\n      }}\n    >\n      <div className=\"time\">\n        <div style={stylesCard}>\n          <div>\n            {minutes}:{seconds}\n          </div>\n          <Progress type=\"circle\" percent={100 - Math.floor(progress)} width={50} />\n          <div>\n            <Button\n              onClick={toggle}\n              type=\"primary\"\n              style={{\n                marginRight: 4,\n              }}\n            >\n              {!isActive ? 'Start' : 'Stop'}\n            </Button>\n            <Button onClick={reset} type=\"primary\">\n              Reset\n            </Button>\n          </div>\n        </div>\n        <hr />\n        <CountdownUI\n          isActive={isActive}\n          minutes={minutes}\n          handleMinutsChange={handleMinutsChange}\n          seconds={seconds}\n          handleSecondsChange={handleSecondsChange}\n          handleSliderChange={handleSliderChange}\n        />\n      </div>\n    </Card>\n  );\n  return <div>{renderCard()}</div>;\n};\n\nexport default Countdown;\n","import React from 'react';\nimport { Tabs, Layout } from 'antd';\n\nimport 'antd/dist/antd.css';\nimport Timer from './components/Timer';\nimport Countdown from './components/Countdown';\n\nconst { TabPane } = Tabs;\nconst stylesLayout = { padding: 16 };\n\nconst App = () => (\n  <Layout style={stylesLayout}>\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane tab=\"Tab 1\" key=\"1\">\n        <Timer />\n      </TabPane>\n      <TabPane tab=\"Tab 2\" key=\"2\">\n        <Countdown />\n      </TabPane>\n    </Tabs>\n  </Layout>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}