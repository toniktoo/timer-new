{"version":3,"sources":["components/Timer.jsx","components/CountdownUI.jsx","components/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx","components/chimes.wav"],"names":["Timer","useState","isActive","setIsActive","now","setNow","ms","setMs","useEffect","timerId","setTimeout","tick","Date","clearTimeout","mathDel","num","Math","trunc","title","bordered","style","width","className","type","onClick","marginRight","CountdownUI","props","minutes","handleSecondsChange","handleSliderChange","handleMinutsChange","seconds","disabled","min","max","value","onChange","step","Countdown","setMinutes","setSeconds","startTime","setStartTime","progress","setProgress","stylesCard","display","alignItems","justifyContent","toggle","reset","interval","setInterval","sec","Audio","mp3","play","clearInterval","time","percent","floor","TabPane","Tabs","stylesLayout","padding","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.99494a91.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Card } from 'antd';\r\n\r\nconst Timer = () => {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [now, setNow] = useState(null);\r\n  const [ms, setMs] = useState(0);\r\n\r\n  function toggle() {\r\n    setIsActive(!isActive);\r\n    if (now === null) {\r\n      setNow(Date.now());\r\n    }\r\n  }\r\n\r\n  function reset() {\r\n    setIsActive(false);\r\n    setMs(0);\r\n    setNow(null);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let timerId = null;\r\n    if (isActive) {\r\n      timerId = setTimeout(function tick() {\r\n        setMs(Date.now() - now);\r\n        timerId = setTimeout(tick, 24);\r\n      }, 24);\r\n    } else if (!isActive && ms !== 0) {\r\n      clearTimeout(timerId);\r\n    }\r\n    return () => clearTimeout(timerId);\r\n  }, [isActive, now, ms]);\r\n\r\n  const mathDel = (num) => Math.trunc(num);\r\n\r\n  // eslint-disable-next-line max-len\r\n  const renderHour = () => (mathDel(ms / 1000 / 60) < 60 ? mathDel(ms / 1000 / 60) : mathDel(ms / 1000 / 60) % 60);\r\n\r\n  const renderMin = () => (mathDel(ms / 1000) < 10 ? mathDel(ms / 1000) : mathDel(ms / 1000) % 60);\r\n\r\n  const renderSec = () => (ms < 1000 ? ms : ms % 1000);\r\n\r\n  return (\r\n    <div>\r\n      <Card title=\"Timer\" bordered={false} style={{ width: 300 }}>\r\n        <div className=\"time\">\r\n          {renderHour()}\r\n          m:\r\n          {' '}\r\n          {renderMin()}\r\n          s:\r\n          {' '}\r\n          {renderSec()}\r\n          ms\r\n          <hr />\r\n          <div>\r\n            <Button type=\"primary\" onClick={toggle} style={{ marginRight: 5 }}>\r\n              {isActive ? 'Pause' : 'Start'}\r\n            </Button>\r\n            <Button type=\"primary\" onClick={reset}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { Slider, InputNumber } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CountdownUI = (props) => {\r\n  const {\r\n    isActive,\r\n    minutes,\r\n    handleSecondsChange,\r\n    handleSliderChange,\r\n    handleMinutsChange,\r\n    seconds,\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <span>minutes: </span>\r\n        <InputNumber\r\n          disabled={isActive}\r\n          min={0}\r\n          max={719} // у минут ограничиваться 720 минутами\r\n          style={{}}\r\n          value={minutes}\r\n          onChange={handleMinutsChange}\r\n          type=\"number\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>seconds: </span>\r\n        <InputNumber\r\n          disabled={isActive}\r\n          min={0}\r\n          max={60} // у секунд 0 до 60 сек\r\n          style={{}}\r\n          value={seconds}\r\n          onChange={handleSecondsChange}\r\n          type=\"number\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Slider\r\n          disabled={isActive}\r\n          min={0}\r\n          max={60 * 60} // у слайдера 0 до 60 минут\r\n          step={15} // шаг 15с\r\n          onChange={handleSliderChange}\r\n          value={minutes * 60 + seconds}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCountdownUI.propTypes = {\r\n  isActive: PropTypes.bool.isRequired,\r\n  minutes: PropTypes.number.isRequired,\r\n  handleSecondsChange: PropTypes.func.isRequired,\r\n  handleSliderChange: PropTypes.func.isRequired,\r\n  handleMinutsChange: PropTypes.func.isRequired,\r\n  seconds: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default CountdownUI;\r\n","/* eslint-disable jsx-a11y/media-has-caption */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Progress, Button } from 'antd';\r\nimport CountdownUI from './CountdownUI';\r\nimport mp3 from './chimes.wav';\r\n\r\nconst Countdown = () => {\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [startTime, setStartTime] = useState(0);\r\n  const [progress, setProgress] = useState(100);\r\n  const stylesCard = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  };\r\n\r\n  const toggle = () => {\r\n    if (!(minutes === 0 && seconds === 0)) {\r\n      setIsActive(!isActive);\r\n    }\r\n    setStartTime(minutes * 60 + seconds);\r\n  };\r\n\r\n  const reset = () => {\r\n    setSeconds(0);\r\n    setMinutes(0);\r\n    setProgress(100);\r\n    setIsActive(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      setProgress((100 * (minutes * 60 + seconds)) / startTime);\r\n      interval = setInterval(() => {\r\n        if (seconds === 0) {\r\n          setMinutes((min) => min - 1);\r\n          setSeconds(60);\r\n        }\r\n        setSeconds((sec) => sec - 1);\r\n        if (seconds === 1) {\r\n          setMinutes((min) => min - 1);\r\n          setSeconds(59);\r\n        }\r\n        if (minutes === 0 && seconds === 1) {\r\n          new Audio(mp3).play();\r\n          reset();\r\n        }\r\n      }, 1000);\r\n    } else if (!isActive) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActive, seconds, minutes, progress, startTime]);\r\n\r\n  const handleSecondsChange = (sec) => {\r\n    setSeconds(sec);\r\n  };\r\n  const handleMinutsChange = (min) => {\r\n    setMinutes(min);\r\n    if (min > 718) {\r\n      setSeconds(60);\r\n    } else {\r\n      setSeconds(0);\r\n    }\r\n  };\r\n  const handleSliderChange = (time) => {\r\n    setMinutes(Math.trunc(time / 60));\r\n    setSeconds(time % 60);\r\n  };\r\n\r\n  const renderCard = () => (\r\n    <Card\r\n      title=\"Countdown\"\r\n      bordered={false}\r\n      style={{\r\n        width: 300,\r\n      }}\r\n    >\r\n      <div className=\"time\">\r\n        <div style={stylesCard}>\r\n          <div>\r\n            {minutes || 0}\r\n            :\r\n            {seconds || 0}\r\n          </div>\r\n          <Progress type=\"circle\" percent={100 - Math.floor(progress)} width={50} />\r\n          <div>\r\n            <Button\r\n              onClick={toggle}\r\n              type=\"primary\"\r\n              style={{\r\n                marginRight: 4,\r\n              }}\r\n            >\r\n              {!isActive ? 'Start' : 'Stop'}\r\n            </Button>\r\n            <Button onClick={reset} type=\"primary\">\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <CountdownUI\r\n          isActive={isActive}\r\n          minutes={minutes}\r\n          handleMinutsChange={handleMinutsChange}\r\n          seconds={seconds}\r\n          handleSecondsChange={handleSecondsChange}\r\n          handleSliderChange={handleSliderChange}\r\n        />\r\n      </div>\r\n    </Card>\r\n  );\r\n  return <div>{renderCard()}</div>;\r\n};\r\n\r\nexport default Countdown;\r\n","import React from 'react';\r\nimport { Tabs, Layout } from 'antd';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport Timer from './components/Timer';\r\nimport Countdown from './components/Countdown';\r\n\r\nconst { TabPane } = Tabs;\r\nconst stylesLayout = { padding: 16 };\r\n\r\nconst App = () => (\r\n  <div className=\"containerApp\">\r\n    <Layout style={stylesLayout}>\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab=\"Tab 1\" key=\"1\">\r\n          <Timer />\r\n        </TabPane>\r\n        <TabPane tab=\"Tab 2\" key=\"2\">\r\n          <Countdown />\r\n        </TabPane>\r\n      </Tabs>\r\n    </Layout>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chimes.d352721f.wav\";"],"sourceRoot":""}